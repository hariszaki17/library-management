definitions:
  dto.AuthRequest:
    description: Authentication response data
    properties:
      password:
        example: maman
        type: string
      username:
        example: dudung
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthResponse:
    description: User response data
    properties:
      token:
        type: string
    type: object
  dto.Author:
    description: Author details
    properties:
      biography:
        type: string
      birth_date:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  dto.Book:
    description: Book details
    properties:
      author_id:
        type: integer
      category_id:
        type: integer
      id:
        type: integer
      isbn:
        type: string
      published_at:
        type: string
      stock:
        type: integer
      title:
        type: string
    type: object
  dto.BookRecommendation:
    description: BookRecommendation details
    properties:
      author_id:
        type: integer
      borrowed_count:
        type: integer
      category_id:
        type: integer
      id:
        type: integer
      isbn:
        type: string
      published_at:
        type: string
      stock:
        type: integer
      title:
        type: string
    type: object
  dto.BorrowingRecords:
    description: BorrowingRecords details
    properties:
      book_id:
        type: integer
      borrowed_at:
        type: string
      returned_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.Category:
    description: Category details
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CreateAuthorRequest:
    description: A request structure for creating an author
    properties:
      biography:
        example: An accomplished author.
        type: string
      birth_date:
        example: "1980-01-01"
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
    required:
    - biography
    - birth_date
    - first_name
    - last_name
    type: object
  dto.CreateAuthorResponse:
    description: A success message for author creation
    properties:
      message:
        type: string
    type: object
  dto.CreateBookRequest:
    description: A request structure for creating a book
    properties:
      author_id:
        example: 2
        type: integer
      category_id:
        example: 3
        type: integer
      isbn:
        example: "1234567890"
        type: string
      published_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      stock:
        example: 10
        type: integer
      title:
        example: Book Title
        type: string
    required:
    - author_id
    - category_id
    - isbn
    - published_at
    - title
    type: object
  dto.CreateBookResponse:
    description: A success message for book creation
    properties:
      message:
        type: string
    type: object
  dto.CreateCategoryRequest:
    description: A request structure for creating a cateogry
    properties:
      name:
        example: Category Name
        type: string
    required:
    - name
    type: object
  dto.CreateCategoryResponse:
    description: A success message for category creation
    properties:
      message:
        type: string
    type: object
  dto.DeleteAuthorResponse:
    description: A success message for author deletion
    properties:
      message:
        type: string
    type: object
  dto.DeleteBookResponse:
    description: A success message for book deletion
    properties:
      message:
        type: string
    type: object
  dto.DeleteCategoryResponse:
    description: A success message for category deletion
    properties:
      message:
        type: string
    type: object
  dto.ErrorResponse:
    description: Error response structure
    properties:
      message:
        type: string
    type: object
  dto.GetAuthorsResponse:
    description: A list of authors
    properties:
      authors:
        items:
          $ref: '#/definitions/dto.Author'
        type: array
    type: object
  dto.GetBookRecommendationResponse:
    description: A list of book recommendation
    properties:
      books:
        items:
          $ref: '#/definitions/dto.BookRecommendation'
        type: array
    type: object
  dto.GetBooksResponse:
    description: A list of books
    properties:
      books:
        items:
          $ref: '#/definitions/dto.Book'
        type: array
    type: object
  dto.GetBorrowingRecordsResponse:
    description: A list of borrowing records
    properties:
      borrowing_records:
        items:
          $ref: '#/definitions/dto.BorrowingRecords'
        type: array
    type: object
  dto.GetCategoriesResponse:
    description: A list of categories
    properties:
      categories:
        items:
          $ref: '#/definitions/dto.Category'
        type: array
    type: object
  dto.GetUserResponse:
    description: User response data
    properties:
      username:
        type: string
    type: object
  dto.UpdateAuthorRequest:
    description: A request structure for updating an author
    properties:
      biography:
        example: An accomplished author.
        type: string
      birth_date:
        example: "1990-01-01"
        type: string
      first_name:
        example: John Updated
        type: string
      last_name:
        example: Doe Update
        type: string
    type: object
  dto.UpdateAuthorResponse:
    description: A success message for author update
    properties:
      message:
        type: string
    type: object
  dto.UpdateBookRequest:
    description: A request structure for updating a book
    properties:
      author_id:
        example: 2
        type: integer
      category_id:
        example: 3
        type: integer
      isbn:
        example: "1234567890"
        type: string
      published_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      stock:
        example: 10
        type: integer
      title:
        example: Book Title
        type: string
    type: object
  dto.UpdateBookResponse:
    description: A success message for book update
    properties:
      message:
        type: string
    type: object
  dto.UpdateCategoryRequest:
    description: A request structure for updating a cateogry
    properties:
      name:
        example: Category Name Updated
        type: string
    required:
    - name
    type: object
  dto.UpdateCategoryResponse:
    description: A success message for category update
    properties:
      message:
        type: string
    type: object
  dto.UserBorrowBookRequest:
    description: A request structure for borrowing a book
    properties:
      book_id:
        example: 1
        type: integer
    required:
    - book_id
    type: object
  dto.UserBorrowBookResponse:
    description: User borrow book response data
    properties:
      message:
        type: string
    type: object
  dto.UserReturnBookRequest:
    description: A request structure for returning a book
    properties:
      id:
        example: 1
        type: integer
    required:
    - id
    type: object
  dto.UserReturnBookResponse:
    description: User return book response data
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /authors:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of authors from the gRPC service
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetAuthorsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of authors
      tags:
      - Authors
    post:
      consumes:
      - application/json
      description: Create a new author with the provided information
      parameters:
      - description: Author information
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAuthorRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateAuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new author
      tags:
      - Authors
  /authors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a author with the provided information
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteAuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a author
      tags:
      - Authors
    put:
      consumes:
      - application/json
      description: Update a author with the provided information
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Author information
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAuthorRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateAuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a author
      tags:
      - Authors
  /books:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of books from the gRPC service
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: Query search of title
        in: query
        name: query
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBooksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create a new book with the provided information
      parameters:
      - description: Book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBookRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new book
      tags:
      - Books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book with the provided information
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a book
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update a book with the provided information
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBookRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a book
      tags:
      - Books
  /books/recommendation:
    get:
      consumes:
      - application/json
      description: Retrieve a list of book recommendation from the gRPC service
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBookRecommendationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of book recommendation
      tags:
      - Books
  /borrow-book:
    post:
      consumes:
      - application/json
      description: User borrow a book from the gRPC service
      parameters:
      - description: User borrow book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.UserBorrowBookRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserBorrowBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Borrowing Record
      tags:
      - BorrowBook
  /borrow-book/records:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of borrowing records from the gRPC service
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBorrowingRecordsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of borrowing records
      tags:
      - BorrowBook
  /borrow-book/return:
    post:
      consumes:
      - application/json
      description: User return a book from the gRPC service
      parameters:
      - description: User return book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.UserReturnBookRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserReturnBookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update borrowing record and return the book
      tags:
      - BorrowBook
  /categories:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of categories from the gRPC service
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a list of categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided information
      parameters:
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category with the provided information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a category
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update a category with the provided information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category information
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a category
      tags:
      - Categories
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by their ID from the gRPC service
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a user by ID
      tags:
      - Users
swagger: "2.0"
